{
  "cardSection": {
    "sections": [
      {
        "title": "FRACTREE",
        "id": "fractree",
        "text": "<br/><p> Tree generator coded in python with object oriented programming where fractal principles where applied to create each single twig with the same code, from the trunk to the leaves.</p<p> The interface is being developed with TKINTER, python's default GUI library.</p><p> The user can choose parameters such as angle randomness, angle module of variation, deepness level of the generated structure, and others.</p><p>Planned features for the feature are save/load tree seeds, export result images and batch render multiple results with the same seed.</p>",
        "theme": {
          "backgroundColor": "",
          "color": ""
        },
        "links": [
          {
            "text": "behance presentation",
            "href": "https://www.behance.net/gallery/79024121/Gerador-de-Arvores-em-Python",
            "target": "_blank"
          },
          {
            "text": "github code repository",
            "href": "https://github.com/gabrielbrise/fractree",
            "target": "_blank"
          }
        ],
        "carousel": [
          {
            "image": "img/ui-ux/fractree1.png"
          },
          {
            "image": "img/ui-ux/fractree2.png"
          },
          {
            "image": "img/ui-ux/fractree3.png"
          }
        ]
      },
      {
        "title": "GEDbot",
        "id": "gedbot",
        "text": "<br /><p> A fullstack application with ReactJS for the front-end and Node.js/MondoDB for the back-end.</p><p> The user can generate apologies with the random combination of the parts of sentences: greeting, reason and goodbye. These sentences are suggestions by the user community which are voted by other users and if they reach the approved threshold the back-end promotes the suggestion as a possible generated answer. If the suggestion is rejected with many negative votes, not only the sentence is deleted from the database but also the votes that are attached to it.</p><p> The project is hosted in AWS: the back-end is an EC2 instance managed by an Elastic Beanstalk with a load balancer that applies the AWS Certificate. The front-end is a static output of a single page ReactJS application hosted with AWS S3 and with Cloudfront as the static website manager for DDoS protection and HTTPS certificate.</p>",
        "theme": {
          "backgroundColor": "#282C34",
          "color": "white"
        },
        "links": [
          {
            "text": "try it yourself",
            "href": "https://gedbot.brise.dev",
            "target": "_blank"
          },
          {
            "text": "front-end github code repository",
            "href": "https://github.com/gabrielbrise/gedbot-react-frontend",
            "target": "_blank"
          },
          {
            "text": "back-end github code repository",
            "href": "https://github.com/gabrielbrise/gedbot-api",
            "target": "_blank"
          },
          {
            "text": "python mvp github code repository",
            "href": "https://github.com/gabrielbrise/gedbot",
            "target": "_blank"
          }
        ],
        "carousel": [
          {
            "image": "img/software/gedbot1.png"
          },
          {
            "image": "img/software/gedbot2.png"
          },
          {
            "image": "img/software/gedbot3.png"
          }
        ]
      },
      {
        "title": "DOOMFIRE",
        "id": "doomfire",
        "text": "<br /><p> Pure javascript exercise inspired by Filipe Deschamps approach in his <a href='https://youtu.be/fxm8cadCqbs' target='_blank'>youtube video</a>.<p> Instead of tables and DOM manipulation it was decided to use ECMAScript5 features such as map to render the pixels within a HTML5 canvas.</p><p> Also, the UI was designed to be responsive on all devices.</p>",
        "theme": {
          "backgroundColor": "#070707",
          "color": ""
        },
        "links": [
          {
            "text": "try it yourself",
            "href": "https://gabrielbrise.github.io",
            "target": "_blank"
          },
          {
            "text": "github code repository",
            "href": "https://github.com/gabrielbrise/doom-fire",
            "target": "_blank"
          }
        ],
        "carousel": [
          {
            "image": "img/software/doomfire1.png"
          },
          {
            "image": "img/software/doomfire2.png"
          },
          {
            "image": "img/software/doomfire3.png"
          }
        ]
      },

      {
        "title": "SOCCERSWAP",
        "id": "soccerswap",
        "text": "<br/><p>Multiplatform application developed with python language and kivy framework. </p> <p> The goal was to administer the order and time when each player should enter and leave the soccer match.</p><p> The UI priorizes the minimum number of interactions in order to be easily used during the substitutions.</p>",
        "theme": {
          "backgroundColor": "#343a40",
          "color": "white"
        },
        "links": [
          {
            "text": "github code repository",
            "href": "https://github.com/gabrielbrise/soccerswap",
            "target": "_blank"
          }
        ],
        "carousel": [
          {
            "image": "img/ui-ux/soccerswap1.png"
          },
          {
            "image": "img/ui-ux/soccerswap2.png"
          },
          {
            "image": "img/ui-ux/soccerswap3.png"
          }
        ]
      }
    ]
  }
}
