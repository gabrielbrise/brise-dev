{
  "cardSection": {
    "sections": [
      {
        "title": "FRACTREE",
        "id": "fractree",
        "text": "<br /><p> A interface está sendo desenvolvida através do TKINTER, biblioteca padrão para 'GUI' do Python.</p><p> A composição leva em conta a área de 'chão' onde surgem as árvores geradas de forma paramétrica. Ao centro está o botão para rodar o código principal que constrói as formas. Ao lado esquerdo as propriedades que coordenam o seu crescimento.</p><p>Ainda em desenvolvimento, ao lado direito estarão as configurações do programa como: salvar/carregar conjunto de parâmetros como uma espécie de árvore, gerar arquivo SVG, entre outros.</p><p>Os ícones estão sendo desenhados como vetores usando proporções áureas.</p>",
        "theme": {
          "backgroundColor": "",
          "color": ""
        },
        "links": [
          {
            "text": "saiba mais aqui",
            "href": "https://www.behance.net/gallery/79024121/Gerador-de-Arvores-em-Python"
          }
        ],
        "carousel": [
          {
            "image": "img/ui-ux/fractree1.png"
          },
          {
            "image": "img/ui-ux/fractree2.png"
          },
          {
            "image": "img/ui-ux/fractree3.png"
          }
        ]
      },
      {
        "title": "DOOMFIRE",
        "id": "doomfire",
        "text": "<br /><p> A interface está sendo desenvolvida através do TKINTER, biblioteca padrão para 'GUI' do Python.</p><p> A composição leva em conta a área de 'chão' onde surgem as árvores geradas de forma paramétrica. Ao centro está o botão para rodar o código principal que constrói as formas. Ao lado esquerdo as propriedades que coordenam o seu crescimento.</p><p>Ainda em desenvolvimento, ao lado direito estarão as configurações do programa como: salvar/carregar conjunto de parâmetros como uma espécie de árvore, gerar arquivo SVG, entre outros.</p><p>Os ícones estão sendo desenhados como vetores usando proporções áureas.</p>",
        "theme": {
          "backgroundColor": "#070707",
          "color": ""
        },
        "links": [
          {
            "text": "saiba mais aqui",
            "href": "https://www.behance.net/gallery/79024121/Gerador-de-Arvores-em-Python"
          }
        ],
        "carousel": [
          {
            "image": "img/software/doomfire1.png"
          },
          {
            "image": "img/software/doomfire2.png"
          },
          {
            "image": "img/software/doomfire3.png"
          }
        ]
      },
      {
        "title": "GEDbot",
        "id": "gedbot",
        "text": "<br /><p> A interface está sendo desenvolvida através do TKINTER, biblioteca padrão para 'GUI' do Python.</p><p> A composição leva em conta a área de 'chão' onde surgem as árvores geradas de forma paramétrica. Ao centro está o botão para rodar o código principal que constrói as formas. Ao lado esquerdo as propriedades que coordenam o seu crescimento.</p><p>Ainda em desenvolvimento, ao lado direito estarão as configurações do programa como: salvar/carregar conjunto de parâmetros como uma espécie de árvore, gerar arquivo SVG, entre outros.</p><p>Os ícones estão sendo desenhados como vetores usando proporções áureas.</p>",
        "theme": {
          "backgroundColor": "",
          "color": ""
        },
        "links": [
          {
            "text": "código do projeto de front-end",
            "href": "https://github.com/gabrielbrise/gedbot-react-frontend"
          },
          {
            "text": "código do projeto de back-end",
            "href": "https://github.com/gabrielbrise/gedbot-api"
          },
          {
            "text": "código do projeto de python com interface em kivy",
            "href": "https://github.com/gabrielbrise/gedbot"
          }
        ],
        "carousel": [
          {
            "image": "https://via.placeholder.com/640x480?text=GEDbot"
          },
          {
            "image": "https://via.placeholder.com/640x480?text=GEDbot"
          },
          {
            "image": "https://via.placeholder.com/640x480?text=GEDbot"
          }
        ]
      },

      {
        "title": "POMODO-IT",
        "id": "pomodoit",
        "text": "<br /> <p> Simples aplicativo de tarefas com contador para uso da técnica pomodoro de gerenciamento pessoal de produtividade. </p> <p> Desenvolvido em React, biblioteca Javascript de código-aberto que aliado de HTML e CSS permite a criação de páginas dinâmicas com componentização de suas partes. Antes de partir para o código foram feitos modelos para testar qual diagramação seria mais clara e funcional para o usuário. </p> <p> Existem planos para uma versão com mais funcionalidades com aplicação de conceitos de gameficação. </p>",
        "theme": {
          "backgroundColor": "white",
          "color": "#f56565",
          "carousel": "dark"
        },
        "links": [
          {
            "text": "repositório disponível no github aqui",
            "href": "https://github.com/gabrielbrise/pomodo-it"
          },
          {
            "text": "experimente aqui",
            "href": "https://gabrielbrise.github.io/pomodo-it/"
          }
        ],
        "carousel": [
          {
            "image": "img/ui-ux/pomodoit1.png"
          },
          {
            "image": "img/ui-ux/pomodoit2.png"
          },
          {
            "image": "img/ui-ux/pomodoit3.png"
          }
        ]
      },
      {
        "title": "SOCCERSWAP",
        "id": "soccerswap",
        "text": "<br /> <p> Aplicativo multi-plataforma desenvolvido em Python com o framework Kivy para a interface gráfica. </p> <p> O objetivo do programa é administrar a ordem de saída dos jogadores durante partidas casuais de futebol, surgiu da necessidade de algo que organizasse de forma justa para que todos joguem igualmente. </p> <p> As 3 principais funções se concentram na barra inferior e são elas: sortear ordem, rodar timer e adicionar jogador. </p> <p> Cada vez que o temporizador chega a 0 um som é tocado para sinalizar quem é o próximo jogador a ir para o banco, então ele apenas clica em seu nome para sinalizar que saiu e o timer é ativado novamente. Assim o sistema prioriza minimizar ao máximo a necessidade de cliques do usuário durante a partida. </p>",
        "theme": {
          "backgroundColor": "#343a40",
          "color": "white"
        },
        "links": [
          {
            "text": "repositório disponível no github aqui",
            "href": "https://github.com/gabrielbrise/soccerswap"
          }
        ],
        "carousel": [
          {
            "image": "img/ui-ux/soccerswap1.png"
          },
          {
            "image": "img/ui-ux/soccerswap2.png"
          },
          {
            "image": "img/ui-ux/soccerswap3.png"
          }
        ]
      }
    ]
  }
}
